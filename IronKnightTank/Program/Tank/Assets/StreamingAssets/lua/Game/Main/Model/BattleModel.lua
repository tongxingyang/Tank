---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by JCY.
--- DateTime: 2018/10/15 23:53
---

local BattleCfg = require("Game.Main.Model.Data.BattleCfg")
local BattleData = require("Game.Main.Model.Data.BattleData")
local TankDataConfig = require("Game.Main.Model.Data.TankDataCfg")
local SaveModel = require("Game.Main.Model.SaveModel")

---@class BattleModel:ISaveLoad
local BattleModel = {}
local this = BattleModel;

---@type BattleData[] 保存战役队列
BattleModel.BattleData = {};
---@type BattleCfg[] 战役配置队列
BattleModel.BattleCfg = {};

---载入战役数据
function BattleModel.Load(info)
    local configBattle = JsonDataMgr.GetAllJsonData(DataConst.DataName.Battle);
    this.BattleData = {};
    this.BattleCfg = {}
    if info.SaveBattleData ~= nil then
        for k, v in pairs(info.SaveBattleData) do
            local temp = BattleData.new();
            temp:UpdataInfo(v);
            table.insert(this.BattleData, temp);
        end
    end
    for k, v in pairs(configBattle) do
        table.insert(this.BattleCfg, BattleCfg.new(v));
    end
end

---保存战役数据
function BattleModel.Save()
    SaveModel.SaveData:SetBattleData(this.BattleData)
end

---@return BattleCfg 返回所有加载配置战役的信息(未解析)
function BattleModel.GetAllConfigBattleData()
    return this.BattleCfg
end

---@return BattleCfg 读取没有打完的战役的信息
function BattleModel.GetSaveBattleData()
    for k, v in pairs(this.BattleData) do
        if v.State == false then
            --返回没有打完的战役
            return this.BattleCfg[tostring(v.ID)]
        else
            return nil;
        end
    end
    -------------TEST----------
    --for k, v in pairs(JsonDataMgr.GetAllJsonData(DataConst.DataName.Battle)) do
    --    table.insert(this.BattleCfg, BattleCfg.new(v));
    --end
    --return this.BattleCfg[1]
    ---------------------------
end

---@return 获取本战役中的配置信息
function BattleModel.GetSaveBattleDetailedData()
    local data = this.GetSaveBattleData()
    local returnTemp = {}
    local dataTankList = string.split(data.TankIDList, "~")
    local dataTankUseList = string.split(data.TankUseList, "~")
    local idMaxCountList = string.split(data.TankIDMaxCountList, "~")
    for i = 1, #dataTankList do
        local temp = {}
        temp.TankID = tonumber(dataTankList[i]);
        temp.TankUse = tonumber(dataTankUseList[i]);
        temp.TankMaxCount = tonumber(idMaxCountList[i]);
        table.insert(returnTemp, temp);
    end
    return returnTemp;
end

---返回当前战役下的士兵最大数
function BattleModel.ReturnSoliderMaxCount()
    return this.GetSaveBattleData().SoliderMaxCount;
end

---返回当前战役下的坦克最大数
function BattleModel.ReturnTankMaxCount()
    return this.GetSaveBattleData().TankMaxCount;
end

---添加新的战役
function BattleModel.AddNewBattle(id)
    local temp = BattleData.new();
    temp:UpdataNew(id);
    table.insert(this.BattleData, temp);
end

---@return BattleData[] 获取玩家自己的战役信息保存数据
function BattleModel.GetAllSaveBattleData()
    return this.BattleData;
end

---设置战役的结果
function BattleModel.ChangeBattleResult(isComplete)
    for k, v in pairs(this.BattleData) do
        if v.State == 0 then
            v.State = isComplete;
        end
    end
end

---@return BattleCfg 根据ID读取战役配置信息
function BattleModel.GetConfigBattleDataByID(id)
    for k, v in pairs(this.GetAllConfigBattleData()) do
        if v.Battle_ID == id then
            return v;
        end
    end
    return nil;
end

---用于显示坦克征调列表
function BattleModel.GetRecruitTankList()
    local data = this.GetSaveBattleDetailedData();
    local returnTemp = {}
    for i = 1, #data do
        local temp = TankDataConfig.new();
        temp:UpdateInfo(data[i])
        table.insert(returnTemp, temp);
    end
    return returnTemp;
end

return BattleModel;