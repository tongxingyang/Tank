//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace Assets.Tools.Script.Sound
{
    using System.Collections.Generic;

    using Assets.Tools.Script.File;

    using Object = UnityEngine.Object;

    /// <summary>
    /// �������
    /// </summary>
    public static class SoundUtilities
    {
        /// <summary>
        /// �����С������
        /// </summary>
        public static IGameVolume volumeCentre;

        public static Audio2DManager Soundlistener
        {
            get
            {
                if (soundlistener == null)
                {
                    soundlistener = Audio2DManager.Init();
                }
                return soundlistener;
            }
        }
        static Audio2DManager soundlistener;


//        public static AudioSource PlaySound(AudioClip clip) { return PlaySound(clip, 1f, null); }
//
//
//        public static AudioSource PlaySound(AudioClip clip, float volume) { return PlaySound(clip, volume, null); }


        public static AudioSource PlaySound(AudioClip clip, float volume, bool loop, Action onEnd)
        {
            if (clip != null)
            {
                var audioSource = Soundlistener.Play(clip, volume, 1, loop, true, onEnd);
                return audioSource;
            }
            return null;
        }

        public static void SetTimeScaleable(AudioSource audioSource,bool ignoreTimeScale)
        {
            for (int i = 0; i < Soundlistener.PlayingList.Count; i++)
            {
                var aduioData = Soundlistener.PlayingList[i];
                if (audioSource == aduioData.Source)
                {
                    aduioData.IgnoreTimeScale = ignoreTimeScale;
                    break;
                }
            }
        }

        public static void StopSound(AudioSource audioSource)
        {
            if (audioSource != null)
                audioSource.Stop();
        }

        public static void StopSound(string audioName)
        {
            StopSound(FindSound(audioName));
        }

        public static void PauseSound(AudioSource audioSource)
        {
            if (audioSource != null)
                audioSource.Pause();
        }

        public static void PauseSound(string audioName)
        {
            PauseSound(FindSound(audioName));
        }

        public static void UnPauseSound(AudioSource audioSource)
        {
            if (audioSource != null)
                audioSource.UnPause();
        }

        public static void UnPauseSound(string audioName)
        {
            UnPauseSound(FindSound(audioName));
        }

        public static AudioSource FindSound(string audioName)
        {
            if (audioName != null)
            {
                for (int i = 0; i < Soundlistener.PlayingList.Count; i++)
                {
                    var audioSource = Soundlistener.PlayingList[i].Source;
                    if (audioSource.clip != null && audioSource.clip.name == audioName)
                    {
                        return audioSource;
                    }
                }
            }
            return null;
        }

        public static AudioClip LoadFromStreamingAssets(string path)
        {
            path = path.Replace("/", "\\");
            var s = string.Format("{0}{1}.wav", LoadPath.streamingAssetsPath, path);
            s = s.Replace("\\", "/");
            var starLoad = SyncLoadAsset.StarLoad<AudioClip>(s);
            if (starLoad == null || starLoad.length == 0)
            {
                s = string.Format("{0}{1}.ogg", LoadPath.streamingAssetsPath, path);
                s = s.Replace("\\", "/");
                starLoad = SyncLoadAsset.StarLoad<AudioClip>(s);
            }
            if (starLoad == null || starLoad.length == 0)
            {
                s = string.Format("{0}{1}.mp3", LoadPath.streamingAssetsPath, path);
                s = s.Replace("\\", "/");
                starLoad = SyncLoadAsset.StarLoad<AudioClip>(s);
            }
            return starLoad;
        }

        public class SyncLoadAsset
        {
            private static string loadPath = string.Empty;//��Դ·��
            private static WWW www = null;

            private static int retry = 1;//�ظ����ش���

            public static T StarLoad<T>(string path) where T:Object
            {
                try
                {
                    loadPath = path;

                    UnityEngine.Object result = null;

                    while (result == null)
                    {
                        foreach (UnityEngine.Object obj in LoadWWW())
                        {
                            if (obj != null)
                            {
                                result = obj;
                            }
                        }
                        if (retry > 0)
                        {
                            if (result != null)
                            {
                                break;
                            }
                            retry--;
                        }
                        else
                        {
                            break;
                        }
                    }
                    Dispose();

                    if (result == null)
                    {
                        return null;
                    }
                    return (T)result;
                }
                catch (Exception e)
                {
                    DebugConsole.Log(e);
                    return null;
                }
            }

            public static IEnumerable<UnityEngine.Object> LoadWWW()
            {
                www = new WWW(loadPath);
                while (true)
                {
                    if (www.isDone && www.progress >= 1)
                    {
                        break;
                    }
                    if (www.error != null && www.error != "")
                    {
                        break;
                    }
                    yield return null;
                }
                yield return www.GetAudioClip();
                var format = string.Format(
                    "{0}({1}) is done {2}.error:{3}.clip({4})",
                    www.url,
                    www.bytes.Length,
                    www.isDone,
                    www.error.IsNullOrEmpty() ? "no error" : www.error.ToString(),
                    www.GetAudioClip() == null? "null":www.GetAudioClip().length.ToString());
                DebugConsole.Log(format);
//                DebugConsole.Log(www.url);
//                DebugConsole.Log(www.isDone);
//                DebugConsole.Log(www.error.IsNullOrEmpty()?"no error":www.error.ToString());
//                DebugConsole.Log(www.bytes.Length);
//                //                Debug.Log(www.GetAudioClip(true, false).name);
//
//                DebugConsole.Log(www.audioClip.length);
//                DebugConsole.Log("----");
            }


            private static void Dispose()
            {
                if (www != null)
                {
                    www.Dispose();
                }
                www = null;
            }
        }
    }
}

