---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by JCY.
--- DateTime: 2018/10/15 13:48
---

---@class RandomSolider 
local RandomSolider  = class("RandomSolider ")

---@type number 等级
RandomSolider .Level = 0
---@type number 名字
RandomSolider .Name = 0
---@type number 命中Card_Art_HeadResources
RandomSolider .Hit = 0
---@type number 技能id
RandomSolider .SkillID = 0
---@type number 能量
RandomSolider .Power = 0
---@type number 轻型坦克
RandomSolider .Compatibility_Small = 0;
---@type number 中型坦克
RandomSolider .Compatibility_Middle = 0;
---@type number 重型坦克
RandomSolider .Compatibility_Heavy = 0;
---@type number 坦歼
RandomSolider .Compatibility_Fighter = 0;
---@type number 对应型号
RandomSolider .Compatibility_Model = 0;
---@type number 指定描述
RandomSolider .Describe = 0;
---@type number 成长
RandomSolider .Growth = 0;
---@type string 头像名字
RandomSolider .Card_Art_HeadResources = ""

function RandomSolider :ctor(config)
    self.Level = 1;
    self.Power = 2;
    self:InitData(config);
end

function RandomSolider :InitData(config)
    self.Hit = math.random(config.Hit.Min, config.Hit.Max)
    self.Growth = math.floor(math.random(config.Growth.Min * 2, config.Growth.Max * 2) + 0.5) / 2  ---精确到0.5
    self.SkillID = math.random() < config.SkillRate and self:GetSKillId() or 0
    self.Compatibility_Model = math.random() < config.OwnTankRate and self:GetOwnTankId() or 0

    self:GenNameAndDes()
    self:GenCompatibility(config)
end

function RandomSolider :GetSKillId()
    local allSkillData = JsonDataMgr.GetAllUnitSKillData()
    local len = table.count(allSkillData)
    local targetIndex = math.random(len)
    local index = 0
    for i, v in pairs(allSkillData) do
        index = index + 1
        if index == targetIndex then
            return v.UnitSkill_ID
        end
    end
end

function RandomSolider :GenNameAndDes()
    self.Name = LocalizationMgr.GetDes(math.random(801 , 849)).."·"..LocalizationMgr.GetDes(math.random(901 , 979))
    self.Describe = LocalizationMgr.GetDes(math.random(100001, 100060))
end

function RandomSolider :GetOwnTankId()
    local DataMgr = require("Game.Model.DataMgr")
    local tankDataList =  DataMgr.GetTankListInfo()
    local tankList = {}
    for i, v in pairs(tankDataList) do
        table.insert(tankList , v.TankData)
    end
    local index = math.random(#tankList)
    return tankList[index].Id
end

function RandomSolider :GetCompatibility(typeCounter, compatibilityConfig)
    local index = {}
    for i, v in pairs(compatibilityConfig) do
        if typeCounter[v.Type] >= v.MaxCount then
            table.insert(index, i)
        end
    end
    local missRate = 0
    for i, v in pairs(index) do
        missRate = compatibilityConfig[v].Rate + missRate
        compatibilityConfig[v] = nil
    end
    for i, v in pairs(compatibilityConfig) do
        v.Rate = v.Rate / (1 - missRate)
    end
    local r = math.random()
    local rate = 0
    for i, v in pairs(compatibilityConfig) do
        rate = v.Rate + rate
        if r <= rate then
            typeCounter[v.Type] = typeCounter[v.Type] + 1
            return i
        end
    end
end



function RandomSolider :GenCompatibility(config)
    local compatibility = config.Compatibility
    local typeCounter = {}
    for i, v in pairs(compatibility) do
        typeCounter[v.Type] = 0
    end
    local compatibilityConfig = {}
    compatibilityConfig[ETankCompatibility.LevelA] = table.copy(compatibility["A"])
    compatibilityConfig[ETankCompatibility.LevelB] = table.copy(compatibility["B"])
    compatibilityConfig[ETankCompatibility.LevelC] = table.copy(compatibility["C"])
    self.Compatibility_Small = self:GetCompatibility(typeCounter, compatibilityConfig)
    self.Compatibility_Middle = self:GetCompatibility(typeCounter, compatibilityConfig)
    self.Compatibility_Fighter = self:GetCompatibility(typeCounter, compatibilityConfig)
    self.Compatibility_Heavy = self:GetCompatibility(typeCounter, compatibilityConfig)
end
return RandomSolider 