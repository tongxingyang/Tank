//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Assets_Scripts_Tools_Lua_LuaReferenceCounterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Assets.Scripts.Tools.Lua.LuaReferenceCounter), typeof(System.Object));
		L.RegFunction("Mark", Mark);
		L.RegFunction("GC", GC);
		L.RegFunction("MarkAll", MarkAll);
		L.RegFunction("Snapshoot", Snapshoot);
		L.RegFunction("New", _CreateAssets_Scripts_Tools_Lua_LuaReferenceCounter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssets_Scripts_Tools_Lua_LuaReferenceCounter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Assets.Scripts.Tools.Lua.LuaReferenceCounter obj = new Assets.Scripts.Tools.Lua.LuaReferenceCounter();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Assets.Scripts.Tools.Lua.LuaReferenceCounter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Mark(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			Assets.Scripts.Tools.Lua.LuaReferenceCounter.Mark(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GC(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Tools.Lua.LuaReferenceCounter.GC();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Tools.Lua.LuaReferenceCounter.MarkAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Snapshoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Tools.Lua.LuaReferenceCounter.Snapshoot();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

