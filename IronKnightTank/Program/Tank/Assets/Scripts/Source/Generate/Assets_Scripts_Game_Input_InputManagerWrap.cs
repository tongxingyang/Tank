//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Assets_Scripts_Game_Input_InputManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Assets.Scripts.Game.Input.InputManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddOnEscListener", AddOnEscListener);
		L.RegFunction("RemoveOnEscListener", RemoveOnEscListener);
		L.RegFunction("AddOnRightMouseClickListener", AddOnRightMouseClickListener);
		L.RegFunction("RemoveOnRightMouseClickListener", RemoveOnRightMouseClickListener);
		L.RegFunction("AddOnLeftMouseClickListener", AddOnLeftMouseClickListener);
		L.RegFunction("RemoveLeftMouseClickListener", RemoveLeftMouseClickListener);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnEscListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.AddOnEscListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.AddOnEscListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Game.Input.InputManager.AddOnEscListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveOnEscListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.RemoveOnEscListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.RemoveOnEscListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Game.Input.InputManager.RemoveOnEscListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnRightMouseClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.AddOnRightMouseClickListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.AddOnRightMouseClickListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Game.Input.InputManager.AddOnRightMouseClickListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveOnRightMouseClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.RemoveOnRightMouseClickListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.RemoveOnRightMouseClickListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Game.Input.InputManager.RemoveOnRightMouseClickListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnLeftMouseClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.AddOnLeftMouseClickListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.AddOnLeftMouseClickListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Game.Input.InputManager.AddOnLeftMouseClickListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveLeftMouseClickListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.RemoveLeftMouseClickListener(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Assets.Scripts.Game.Input.InputManager obj = (Assets.Scripts.Game.Input.InputManager)ToLua.CheckObject<Assets.Scripts.Game.Input.InputManager>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.RemoveLeftMouseClickListener(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Game.Input.InputManager.RemoveLeftMouseClickListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Assets.Scripts.Game.Input.InputManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

