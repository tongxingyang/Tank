//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ReferenceCounterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ReferenceCounter), typeof(System.Object));
		L.RegFunction("Mark", Mark);
		L.RegFunction("GetCurrMarkTypeCount", GetCurrMarkTypeCount);
		L.RegFunction("PrintCurrMarkTypeCount", PrintCurrMarkTypeCount);
		L.RegFunction("GetTypeCount", GetTypeCount);
		L.RegFunction("GetTypeWeakReference", GetTypeWeakReference);
		L.RegFunction("New", _CreateReferenceCounter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateReferenceCounter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ReferenceCounter obj = new ReferenceCounter();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ReferenceCounter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Mark(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				ReferenceCounter.Mark(arg0);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				ReferenceCounter.Mark(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ReferenceCounter.Mark");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrMarkTypeCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Collections.Generic.Dictionary<string,int> o = ReferenceCounter.GetCurrMarkTypeCount();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrintCurrMarkTypeCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ReferenceCounter.PrintCurrMarkTypeCount();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTypeCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			int o = ReferenceCounter.GetTypeCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTypeWeakReference(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.Dictionary<System.WeakReference,string> o = ReferenceCounter.GetTypeWeakReference(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

