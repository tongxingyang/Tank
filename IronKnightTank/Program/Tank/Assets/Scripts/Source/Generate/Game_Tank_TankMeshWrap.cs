//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Game_Tank_TankMeshWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game.Tank.TankMesh), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("RotateTurret", RotateTurret);
		L.RegFunction("RevertTurret", RevertTurret);
		L.RegFunction("SetMaterial", SetMaterial);
		L.RegFunction("SetDefaultMaterila", SetDefaultMaterila);
		L.RegFunction("ResetMaterial", ResetMaterial);
		L.RegFunction("OpenMoveEffect", OpenMoveEffect);
		L.RegFunction("CloseMoveEffect", CloseMoveEffect);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MoveEffectObj", get_MoveEffectObj, set_MoveEffectObj);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RotateTurret(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.RotateTurret(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				obj.RotateTurret(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Tank.TankMesh.RotateTurret");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RevertTurret(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				obj.RevertTurret(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.RevertTurret(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Tank.TankMesh.RevertTurret");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.SetMaterial(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDefaultMaterila(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.SetDefaultMaterila(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
			obj.ResetMaterial();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenMoveEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
			obj.OpenMoveEffect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseMoveEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)ToLua.CheckObject<Game.Tank.TankMesh>(L, 1);
			obj.CloseMoveEffect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveEffectObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)o;
			UnityEngine.GameObject ret = obj.MoveEffectObj;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveEffectObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveEffectObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Tank.TankMesh obj = (Game.Tank.TankMesh)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.MoveEffectObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveEffectObj on a nil value");
		}
	}
}

