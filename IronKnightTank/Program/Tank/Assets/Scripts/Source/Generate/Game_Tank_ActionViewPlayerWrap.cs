//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Game_Tank_ActionViewPlayerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game.Tank.ActionViewPlayer), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PlayOnceView", PlayOnceView);
		L.RegFunction("PlayLoopView", PlayLoopView);
		L.RegFunction("StopLoopView", StopLoopView);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ActionViewDic", get_ActionViewDic, set_ActionViewDic);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayOnceView(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Game.Tank.ActionViewPlayer obj = (Game.Tank.ActionViewPlayer)ToLua.CheckObject<Game.Tank.ActionViewPlayer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.PlayOnceView(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Game.Tank.ActionViewPlayer obj = (Game.Tank.ActionViewPlayer)ToLua.CheckObject<Game.Tank.ActionViewPlayer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.PlayOnceView(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Game.Tank.ActionViewPlayer.PlayOnceView");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayLoopView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.Tank.ActionViewPlayer obj = (Game.Tank.ActionViewPlayer)ToLua.CheckObject<Game.Tank.ActionViewPlayer>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.PlayLoopView(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopLoopView(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.Tank.ActionViewPlayer obj = (Game.Tank.ActionViewPlayer)ToLua.CheckObject<Game.Tank.ActionViewPlayer>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.StopLoopView(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ActionViewDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Tank.ActionViewPlayer obj = (Game.Tank.ActionViewPlayer)o;
			Game.Tank.ActionViewPlayer.ActionViewDictionary ret = obj.ActionViewDic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ActionViewDic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ActionViewDic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Game.Tank.ActionViewPlayer obj = (Game.Tank.ActionViewPlayer)o;
			Game.Tank.ActionViewPlayer.ActionViewDictionary arg0 = (Game.Tank.ActionViewPlayer.ActionViewDictionary)ToLua.CheckObject<Game.Tank.ActionViewPlayer.ActionViewDictionary>(L, 2);
			obj.ActionViewDic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ActionViewDic on a nil value");
		}
	}
}

