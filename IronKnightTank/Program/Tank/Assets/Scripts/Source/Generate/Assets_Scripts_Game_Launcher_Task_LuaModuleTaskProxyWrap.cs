//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Assets_Scripts_Game_Launcher_Task_LuaModuleTaskProxyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy), typeof(System.Object));
		L.RegFunction("StartTask", StartTask);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("SetProgress", SetProgress);
		L.RegFunction("New", _CreateAssets_Scripts_Game_Launcher_Task_LuaModuleTaskProxy);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Weight", get_Weight, null);
		L.RegVar("SetTaskProgress", get_SetTaskProgress, set_SetTaskProgress);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssets_Scripts_Game_Launcher_Task_LuaModuleTaskProxy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				LuaTable arg0 = ToLua.CheckLuaTable(L, 1);
				Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = new Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = (Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy)ToLua.CheckObject<Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy>(L, 1);
			obj.StartTask();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = (Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy)ToLua.CheckObject<Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetProgress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = (Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy)ToLua.CheckObject<Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetProgress(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Weight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = (Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy)o;
			int ret = obj.Weight;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Weight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SetTaskProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = (Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy)o;
			System.Action<XQFramework.Laucher.ILanucherTask,float,string> ret = obj.SetTaskProgress;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SetTaskProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SetTaskProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy obj = (Assets.Scripts.Game.Launcher.Task.LuaModuleTaskProxy)o;
			System.Action<XQFramework.Laucher.ILanucherTask,float,string> arg0 = (System.Action<XQFramework.Laucher.ILanucherTask,float,string>)ToLua.CheckDelegate<System.Action<XQFramework.Laucher.ILanucherTask,float,string>>(L, 2);
			obj.SetTaskProgress = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SetTaskProgress on a nil value");
		}
	}
}

